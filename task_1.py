import sys

"""
Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
"""

"""
Сформировать из введенного числа обратное по порядку входящих в него цифр и вывести на экран.
Например, если введено число 3486, надо вывести 6843.
"""

"""
Python 3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 22:39:24) [MSC v.1916 32 bit (Intel)] on win32
Windows 10 Pro x64
"""

a = input('Введите натуральное число ')


# 1 способ
def func(n):
    print(f'1 способ:')
    base = 10
    res = 0
    while n > 0:
        res = res * base + n % base
        n //= base
    print(f'Число в обратном порядке: {res}')

    x = locals()
    s = 0
    for key, value in x.items():
        if type(value) == list:
            print(f'Список {key} занимает объем {sys.getsizeof(value) + sys.getsizeof(key)}')
        else:
            print(f'Переменная {key} занимает объем {sys.getsizeof(value)}')
        s += sys.getsizeof(value) + sys.getsizeof(key)
    return s


print(f'Общий объем памяти равен {func(int(a))}')


# 2 способ
def func2(n):
    print('*' * 50)
    print(f'2 способ:')
    res = n[::-1]
    print(f'Число в обратном порядке: {res}')

    x = locals()
    s = 0
    for key, value in x.items():
        if type(value) == list:
            print(f'Список {key} занимает объем {sys.getsizeof(value) + sys.getsizeof(key)}')
        else:
            print(f'Переменная {key} занимает объем {sys.getsizeof(value)}')
        s += sys.getsizeof(value) + sys.getsizeof(key)
    return s


print(f'Общий объем памяти равен {func2(a)}')


# 3 способ
def func3(n):
    print('*' * 50)
    print(f'3 способ:')
    base = 10
    print(f'Число в обратном порядке: ', end='')
    while n > 0:
        print(n % base, end='')
        n //= base
    print()

    x = locals()
    s = 0
    for key, value in x.items():
        if type(value) == list:
            print(f'Список {key} занимает объем {sys.getsizeof(value) + sys.getsizeof(key)}')
        else:
            print(f'Переменная {key} занимает объем {sys.getsizeof(value)}')
        s += sys.getsizeof(value) + sys.getsizeof(key)
    return s


print(f'Общий объем памяти равен {func3(int(a))}')


"""
Введите натуральное число 545
1 способ:
Число в обратном порядке: 545
Переменная n занимает объем 12
Переменная base занимает объем 14
Переменная res занимает объем 14
Общий объем памяти равен 123
**************************************************
2 способ:
Число в обратном порядке: 545
Переменная n занимает объем 28
Переменная res занимает объем 28
Общий объем памяти равен 110
**************************************************
3 способ:
Число в обратном порядке: 545
Переменная n занимает объем 12
Переменная base занимает объем 14
Общий объем памяти равен 81
"""


"""
Введите натуральное число 6565132103246810120
1 способ:
Число в обратном порядке: 210186423012315656
Переменная n занимает объем 12
Переменная base занимает объем 14
Переменная res занимает объем 20
Общий объем памяти равен 129
**************************************************
2 способ:
Число в обратном порядке: 0210186423012315656
Переменная n занимает объем 44
Переменная res занимает объем 44
Общий объем памяти равен 142
**************************************************
3 способ:
Число в обратном порядке: 0210186423012315656
Переменная n занимает объем 12
Переменная base занимает объем 14
Общий объем памяти равен 81
"""

"""
Возможно, задача слишком простая для нахождения наиболее эффективного по памяти метода. 
Но даже здесь очевично, что 3 способ без объявления лишних переменных наиболее эффективен. 
При этом второй способ с использованием строки выигрывает у первого при малых числах, 
но достаточно быстро начинает проигрывать при увеличении количества цифр.
Могу рассмотреть другую задачу, если эта недостаточно показательна.

Я пробовала решить задачу без использования locals(), хотела создать словарь с переменными и объемом памяти, но увы)
И появился вопрос, как убрать лишние данные из locals(), если использовать locals() в отдельной функции. 
Пробовала просто убирать элементы, начинающиеся на "_", но тоже не очень получилось.
"""